{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOoe9o6Svq+n4H5Ag6Lujts",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/JaniceLibbyThomas/Extracting-Business-Card-Data-with-OCR/blob/main/capstone_3_Businesscard_reader.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# To extract Text from pic - Easyocr"
      ],
      "metadata": {
        "id": "MfgeEQUI2s2W"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gc6OpcPJCRU9",
        "outputId": "2fd11be4-a6a7-40c4-a05d-46fa0650188b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Collecting easyocr\n",
            "  Downloading easyocr-1.6.2-py3-none-any.whl (2.9 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.9/2.9 MB\u001b[0m \u001b[31m88.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting python-bidi\n",
            "  Downloading python_bidi-0.4.2-py2.py3-none-any.whl (30 kB)\n",
            "Collecting ninja\n",
            "  Downloading ninja-1.11.1-py2.py3-none-manylinux_2_12_x86_64.manylinux2010_x86_64.whl (145 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m146.0/146.0 KB\u001b[0m \u001b[31m20.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: torch in /usr/local/lib/python3.8/dist-packages (from easyocr) (1.13.1+cu116)\n",
            "Collecting pyclipper\n",
            "  Downloading pyclipper-1.3.0.post4-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.whl (619 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m619.2/619.2 KB\u001b[0m \u001b[31m56.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting opencv-python-headless<=4.5.4.60\n",
            "  Downloading opencv_python_headless-4.5.4.60-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (47.6 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m47.6/47.6 MB\u001b[0m \u001b[31m20.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: scipy in /usr/local/lib/python3.8/dist-packages (from easyocr) (1.10.1)\n",
            "Requirement already satisfied: scikit-image in /usr/local/lib/python3.8/dist-packages (from easyocr) (0.19.3)\n",
            "Requirement already satisfied: torchvision>=0.5 in /usr/local/lib/python3.8/dist-packages (from easyocr) (0.14.1+cu116)\n",
            "Requirement already satisfied: Pillow in /usr/local/lib/python3.8/dist-packages (from easyocr) (8.4.0)\n",
            "Requirement already satisfied: PyYAML in /usr/local/lib/python3.8/dist-packages (from easyocr) (6.0)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.8/dist-packages (from easyocr) (1.22.4)\n",
            "Requirement already satisfied: Shapely in /usr/local/lib/python3.8/dist-packages (from easyocr) (2.0.1)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.8/dist-packages (from torchvision>=0.5->easyocr) (2.25.1)\n",
            "Requirement already satisfied: typing-extensions in /usr/local/lib/python3.8/dist-packages (from torchvision>=0.5->easyocr) (4.5.0)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.8/dist-packages (from python-bidi->easyocr) (1.15.0)\n",
            "Requirement already satisfied: PyWavelets>=1.1.1 in /usr/local/lib/python3.8/dist-packages (from scikit-image->easyocr) (1.4.1)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.8/dist-packages (from scikit-image->easyocr) (23.0)\n",
            "Requirement already satisfied: networkx>=2.2 in /usr/local/lib/python3.8/dist-packages (from scikit-image->easyocr) (3.0)\n",
            "Requirement already satisfied: tifffile>=2019.7.26 in /usr/local/lib/python3.8/dist-packages (from scikit-image->easyocr) (2023.2.27)\n",
            "Requirement already satisfied: imageio>=2.4.1 in /usr/local/lib/python3.8/dist-packages (from scikit-image->easyocr) (2.9.0)\n",
            "Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.8/dist-packages (from requests->torchvision>=0.5->easyocr) (1.26.14)\n",
            "Requirement already satisfied: chardet<5,>=3.0.2 in /usr/local/lib/python3.8/dist-packages (from requests->torchvision>=0.5->easyocr) (4.0.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.8/dist-packages (from requests->torchvision>=0.5->easyocr) (2022.12.7)\n",
            "Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.8/dist-packages (from requests->torchvision>=0.5->easyocr) (2.10)\n",
            "Installing collected packages: pyclipper, ninja, python-bidi, opencv-python-headless, easyocr\n",
            "  Attempting uninstall: opencv-python-headless\n",
            "    Found existing installation: opencv-python-headless 4.7.0.72\n",
            "    Uninstalling opencv-python-headless-4.7.0.72:\n",
            "      Successfully uninstalled opencv-python-headless-4.7.0.72\n",
            "Successfully installed easyocr-1.6.2 ninja-1.11.1 opencv-python-headless-4.5.4.60 pyclipper-1.3.0.post4 python-bidi-0.4.2\n"
          ]
        }
      ],
      "source": [
        "! pip install easyocr"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import cv2\n",
        "import easyocr\n",
        "from pylab import rcParams\n",
        "from IPython.display import Image\n",
        "rcParams['figure.figsize'] = 8, 16"
      ],
      "metadata": {
        "id": "_Lv-u-FsCdqk"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "reader = easyocr.Reader(['en'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4SlhMYkvXpDz",
        "outputId": "ed782613-d158-4c8e-e91c-8014362fadd7"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:easyocr.easyocr:CUDA not available - defaulting to CPU. Note: This module is much faster with a GPU.\n",
            "WARNING:easyocr.easyocr:Downloading detection model, please wait. This may take several minutes depending upon your network connection.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Progress: |██████████████████████████████████████████████████| 100.0% Complete"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:easyocr.easyocr:Downloading recognition model, please wait. This may take several minutes depending upon your network connection.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Progress: |██████████████████████████████████████████████████| 100.0% Complete"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Image(\"/content/card3.jpeg\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 413
        },
        "id": "TDbfNQ1EXuPC",
        "outputId": "c82ab5fd-5441-4da3-8cb1-04e171879ab8"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/jpeg": "\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "output2 = reader.readtext('/content/card3.jpeg',detail =0,paragraph = True)\n",
        "output2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-9O9XxJZY-oG",
        "outputId": "c1aba21d-b81d-4d62-b935-d8cb26821365"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['MICHAEL SMITH Creative Director',\n",
              " 'COMPANY',\n",
              " '+012 078 5688 +001 521 4567',\n",
              " 'person@company com WWW companywebsite com',\n",
              " 'Street View Address; 012 South North York, NY']"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "output_s = ''\n",
        "for i in output2:\n",
        "  output_s+=i\n",
        "li = output_s.split(' ')\n",
        "li"
      ],
      "metadata": {
        "id": "gOcm430-1ThX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from easyocr.DBNet.model.constructor import State\n",
        "import re\n",
        "\n",
        "# # To find website.\n",
        "\n",
        "# pattern =\"^((ftp|http|https):\\/\\/)?(www.)?(?!.*(ftp|http|https|www.))[a-zA-Z0-9_-]+(\\.[a-zA-Z]+)+((\\/)[\\w#]+)*(\\/\\w+\\?[a-zA-Z0-9_]+=\\w+(&[a-zA-Z0-9_]+=\\w+)*)?\\/?$\"\n",
        "# f = ''\n",
        "# for x in output2:\n",
        "#   result = re.search(pattern, x) \n",
        "#   if(result!=None):\n",
        "#     f = x\n",
        "#     break\n",
        "\n",
        "# print(\"Website: \", f)\n",
        "\n",
        "#to find company mail\n",
        "pattern_mail =\"^[a-zA-Z0-9]+@[a-zA-Z0-9.com]\"\n",
        "Temp = ''\n",
        "for x in li:\n",
        "  result_1 = re.search(pattern_mail, x) \n",
        "  if(result_1!=None):\n",
        "    Temp = x\n",
        "    break\n",
        "\n",
        "print(\"Email: \", Temp)\n",
        "\n",
        "#to find Phone number\n",
        "pattern_ph=\"[0-9]\"\n",
        "Temp1 = ''\n",
        "for x in li:\n",
        "  result_2 = re.search(pattern_ph, x) \n",
        "  if(result_2!=None):\n",
        "    Temp1 = x\n",
        "    break\n",
        "\n",
        "print(\"Phone number: \", Temp1)\n",
        "\n",
        "#to find Address\n",
        "\n",
        "pattern_street=\"\\d+[ ](?:[A-Za-z0-9.-]+[ ]?)+(?:Avenue|Lane|Road|Boulevard|Drive|Street|Ave|Dr|Rd|Blvd|Ln|St)\\.?\"\n",
        "Temp2 = ''\n",
        "for x in output2:\n",
        "  result_3 = re.search(pattern_street, x) \n",
        "  if(result_3!=None):\n",
        "    Temp2 = x\n",
        "    break\n",
        "if(Temp2 == ''):\n",
        "  Temp2 = output2[-1]\n",
        "\n",
        "print(\"Full address: \", Temp2)\n",
        "area = '' \n",
        "City = ''\n",
        "State = ''\n",
        "pincode = ''\n",
        "\n",
        "\n",
        "\n",
        "address_li = Temp2.split(',')\n",
        "\n",
        "\n",
        "if(len(address_li)==4):\n",
        "  area += address_li[0]\n",
        "  City += address_li[1]\n",
        "  State += address_li[2]\n",
        "  pincode += address_li[3]\n",
        "\n",
        "elif(len(address_li)==3):\n",
        "  area += address_li[0]\n",
        "  City += address_li[1]\n",
        "  State += address_li[2]\n",
        "elif(len(address_li)==2):\n",
        "  area += address_li[0]\n",
        "  City += address_li[1] \n",
        "else:\n",
        "  area += address_li[0]\n",
        "\n",
        "print('Area: ',area)\n",
        "print('City: ',City)\n",
        "print('State: ',State)\n",
        "print('pincode: ',pincode)\n",
        "\n",
        "#cardholder name:\n",
        "cardholder_name = output2[0].split(' ')\n",
        "First_name = cardholder_name[0]\n",
        "Last_name = cardholder_name[1]\n",
        "print('First name: ',First_name)\n",
        "print('Last name: ',Last_name)\n",
        "\n",
        "#designation:\n",
        "designation = ''\n",
        "for i in range(2,len(cardholder_name)):\n",
        "  designation += cardholder_name[i]\n",
        "print('Designation: ',designation)\n",
        "\n",
        "#companyname:\n",
        "\n",
        "company_name = ((Temp.split('@'))[1].split('.'))[0].replace(\"'\",'')\n",
        "print('company name: ', company_name)\n",
        "\n",
        "#companyweb:\n",
        "\n",
        "company_name = ((Temp.split('@'))[1].split('.'))[0].replace(\"'\",'')\n",
        "print('company website: ', 'www.'+company_name+'.com')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IeqAebZi1LJK",
        "outputId": "0c69925a-26d5-4909-f92b-834b417af4a3"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Email:  4567person@company\n",
            "Phone number:  DirectorCOMPANY+012\n",
            "Full address:  Street View Address; 012 South North York, NY\n",
            "Area:  Street View Address; 012 South North York\n",
            "City:   NY\n",
            "State:  \n",
            "pincode:  \n",
            "First name:  MICHAEL\n",
            "Last name:  SMITH\n",
            "Designation:  CreativeDirector\n",
            "company name:  company\n",
            "company website:  www.company.com\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Streamlit code - GUI"
      ],
      "metadata": {
        "id": "W2uQUDuz21rR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install streamlit"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sly7RCNF5bwV",
        "outputId": "34238acf-ea4e-478a-ff4f-f22ce5f7feb2"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Collecting streamlit\n",
            "  Downloading streamlit-1.19.0-py2.py3-none-any.whl (9.6 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m9.6/9.6 MB\u001b[0m \u001b[31m115.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: cachetools>=4.0 in /usr/local/lib/python3.8/dist-packages (from streamlit) (5.3.0)\n",
            "Requirement already satisfied: importlib-metadata>=1.4 in /usr/local/lib/python3.8/dist-packages (from streamlit) (6.0.0)\n",
            "Requirement already satisfied: pyarrow>=4.0 in /usr/local/lib/python3.8/dist-packages (from streamlit) (9.0.0)\n",
            "Requirement already satisfied: click>=7.0 in /usr/local/lib/python3.8/dist-packages (from streamlit) (8.1.3)\n",
            "Collecting validators>=0.2\n",
            "  Downloading validators-0.20.0.tar.gz (30 kB)\n",
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: pandas>=0.25 in /usr/local/lib/python3.8/dist-packages (from streamlit) (1.3.5)\n",
            "Requirement already satisfied: protobuf<4,>=3.12 in /usr/local/lib/python3.8/dist-packages (from streamlit) (3.19.6)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.8/dist-packages (from streamlit) (1.22.4)\n",
            "Requirement already satisfied: requests>=2.4 in /usr/local/lib/python3.8/dist-packages (from streamlit) (2.25.1)\n",
            "Requirement already satisfied: python-dateutil in /usr/local/lib/python3.8/dist-packages (from streamlit) (2.8.2)\n",
            "Requirement already satisfied: toml in /usr/local/lib/python3.8/dist-packages (from streamlit) (0.10.2)\n",
            "Collecting gitpython!=3.1.19\n",
            "  Downloading GitPython-3.1.31-py3-none-any.whl (184 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m184.3/184.3 KB\u001b[0m \u001b[31m26.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting pydeck>=0.1.dev5\n",
            "  Downloading pydeck-0.8.0-py2.py3-none-any.whl (4.7 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.7/4.7 MB\u001b[0m \u001b[31m117.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting semver\n",
            "  Downloading semver-2.13.0-py2.py3-none-any.whl (12 kB)\n",
            "Requirement already satisfied: tornado>=6.0.3 in /usr/local/lib/python3.8/dist-packages (from streamlit) (6.2)\n",
            "Collecting watchdog\n",
            "  Downloading watchdog-2.3.1-py3-none-manylinux2014_x86_64.whl (80 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m80.6/80.6 KB\u001b[0m \u001b[31m11.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting rich>=10.11.0\n",
            "  Downloading rich-13.3.1-py3-none-any.whl (239 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m239.0/239.0 KB\u001b[0m \u001b[31m31.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: typing-extensions>=3.10.0.0 in /usr/local/lib/python3.8/dist-packages (from streamlit) (4.5.0)\n",
            "Collecting pympler>=0.9\n",
            "  Downloading Pympler-1.0.1-py3-none-any.whl (164 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m164.8/164.8 KB\u001b[0m \u001b[31m22.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: tzlocal>=1.1 in /usr/local/lib/python3.8/dist-packages (from streamlit) (1.5.1)\n",
            "Requirement already satisfied: packaging>=14.1 in /usr/local/lib/python3.8/dist-packages (from streamlit) (23.0)\n",
            "Requirement already satisfied: altair>=3.2.0 in /usr/local/lib/python3.8/dist-packages (from streamlit) (4.2.2)\n",
            "Collecting blinker>=1.0.0\n",
            "  Downloading blinker-1.5-py2.py3-none-any.whl (12 kB)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.8/dist-packages (from streamlit) (8.4.0)\n",
            "Requirement already satisfied: toolz in /usr/local/lib/python3.8/dist-packages (from altair>=3.2.0->streamlit) (0.12.0)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.8/dist-packages (from altair>=3.2.0->streamlit) (3.1.2)\n",
            "Requirement already satisfied: entrypoints in /usr/local/lib/python3.8/dist-packages (from altair>=3.2.0->streamlit) (0.4)\n",
            "Requirement already satisfied: jsonschema>=3.0 in /usr/local/lib/python3.8/dist-packages (from altair>=3.2.0->streamlit) (4.3.3)\n",
            "Collecting gitdb<5,>=4.0.1\n",
            "  Downloading gitdb-4.0.10-py3-none-any.whl (62 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m62.7/62.7 KB\u001b[0m \u001b[31m10.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.8/dist-packages (from importlib-metadata>=1.4->streamlit) (3.15.0)\n",
            "Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.8/dist-packages (from pandas>=0.25->streamlit) (2022.7.1)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.8/dist-packages (from python-dateutil->streamlit) (1.15.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.8/dist-packages (from requests>=2.4->streamlit) (2022.12.7)\n",
            "Requirement already satisfied: chardet<5,>=3.0.2 in /usr/local/lib/python3.8/dist-packages (from requests>=2.4->streamlit) (4.0.0)\n",
            "Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.8/dist-packages (from requests>=2.4->streamlit) (2.10)\n",
            "Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.8/dist-packages (from requests>=2.4->streamlit) (1.26.14)\n",
            "Collecting pygments<3.0.0,>=2.14.0\n",
            "  Downloading Pygments-2.14.0-py3-none-any.whl (1.1 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.1/1.1 MB\u001b[0m \u001b[31m89.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting markdown-it-py<3.0.0,>=2.1.0\n",
            "  Downloading markdown_it_py-2.2.0-py3-none-any.whl (84 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m84.5/84.5 KB\u001b[0m \u001b[31m12.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: decorator>=3.4.0 in /usr/local/lib/python3.8/dist-packages (from validators>=0.2->streamlit) (4.4.2)\n",
            "Collecting smmap<6,>=3.0.1\n",
            "  Downloading smmap-5.0.0-py3-none-any.whl (24 kB)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.8/dist-packages (from jinja2->altair>=3.2.0->streamlit) (2.1.2)\n",
            "Requirement already satisfied: pyrsistent!=0.17.0,!=0.17.1,!=0.17.2,>=0.14.0 in /usr/local/lib/python3.8/dist-packages (from jsonschema>=3.0->altair>=3.2.0->streamlit) (0.19.3)\n",
            "Requirement already satisfied: importlib-resources>=1.4.0 in /usr/local/lib/python3.8/dist-packages (from jsonschema>=3.0->altair>=3.2.0->streamlit) (5.12.0)\n",
            "Requirement already satisfied: attrs>=17.4.0 in /usr/local/lib/python3.8/dist-packages (from jsonschema>=3.0->altair>=3.2.0->streamlit) (22.2.0)\n",
            "Collecting mdurl~=0.1\n",
            "  Downloading mdurl-0.1.2-py3-none-any.whl (10.0 kB)\n",
            "Building wheels for collected packages: validators\n",
            "  Building wheel for validators (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for validators: filename=validators-0.20.0-py3-none-any.whl size=19581 sha256=661442117677037ae2dcb5744a7581868b7373ca680f571b867930343d030f06\n",
            "  Stored in directory: /root/.cache/pip/wheels/19/09/72/3eb74d236bb48bd0f3c6c3c83e4e0c5bbfcbcad7c6c3539db8\n",
            "Successfully built validators\n",
            "Installing collected packages: watchdog, validators, smmap, semver, pympler, pygments, mdurl, blinker, pydeck, markdown-it-py, gitdb, rich, gitpython, streamlit\n",
            "  Attempting uninstall: pygments\n",
            "    Found existing installation: Pygments 2.6.1\n",
            "    Uninstalling Pygments-2.6.1:\n",
            "      Successfully uninstalled Pygments-2.6.1\n",
            "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
            "ipython 7.9.0 requires jedi>=0.10, which is not installed.\u001b[0m\u001b[31m\n",
            "\u001b[0mSuccessfully installed blinker-1.5 gitdb-4.0.10 gitpython-3.1.31 markdown-it-py-2.2.0 mdurl-0.1.2 pydeck-0.8.0 pygments-2.14.0 pympler-1.0.1 rich-13.3.1 semver-2.13.0 smmap-5.0.0 streamlit-1.19.0 validators-0.20.0 watchdog-2.3.1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install pyngrok\n",
        "!pip install dnspython"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9i7m0YJK5pnE",
        "outputId": "d81f99ea-64b3-4dea-f61f-116378d49034"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Collecting pyngrok\n",
            "  Downloading pyngrok-5.2.1.tar.gz (761 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m761.3/761.3 KB\u001b[0m \u001b[31m27.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: PyYAML in /usr/local/lib/python3.8/dist-packages (from pyngrok) (6.0)\n",
            "Building wheels for collected packages: pyngrok\n",
            "  Building wheel for pyngrok (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for pyngrok: filename=pyngrok-5.2.1-py3-none-any.whl size=19792 sha256=bf19f64122177931c0bd97a4c6f23be4c02b8911e1a33bb1b945dd4b760bde91\n",
            "  Stored in directory: /root/.cache/pip/wheels/5d/f2/70/526da675d32f17577ec47ac4c663084efe39d47c826b6c3bb1\n",
            "Successfully built pyngrok\n",
            "Installing collected packages: pyngrok\n",
            "Successfully installed pyngrok-5.2.1\n",
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: dnspython in /usr/local/lib/python3.8/dist-packages (2.3.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile app.py\n",
        "import streamlit as st\n",
        "import os\n",
        "import pandas as pd\n",
        "from PIL import Image\n",
        "from easyocr.DBNet.model.constructor import State\n",
        "import re\n",
        "import matplotlib.pyplot as plt\n",
        "import cv2\n",
        "import easyocr\n",
        "from pylab import rcParams\n",
        "from sqlite3 import connect\n",
        "import requests\n",
        "\n",
        "\n",
        "st.title('BUSINESS CARD AUTOMATIC READER')\n",
        "\n",
        "conn = connect(\"Business_card.db\")\n",
        "cursor = conn.cursor()\n",
        " \n",
        "def load_image(image_file):\n",
        "  img = Image.open(image_file)\n",
        "  return img\n",
        "\n",
        "image_file = st.file_uploader(\"Upload Business card Image\",type=['jpeg','jpg'])\n",
        "if image_file is not None:\n",
        "  file_details = {\"FileName\":image_file.name,\"FileType\":image_file.type}\n",
        "  img = load_image(image_file)\n",
        "  with st.expander(\"Image Uploaded\"):\n",
        "    st.image(img)\n",
        "\n",
        "  reader = easyocr.Reader(['en'])\n",
        "  output2 = reader.readtext(img,detail =0,paragraph = True)\n",
        "  \n",
        "\n",
        "  output_s = ''\n",
        "  for i in output2:\n",
        "    output_s+=i\n",
        "  li = output_s.split(' ')\n",
        "\n",
        "  with st.expander(\"Details\"):\n",
        "  #to find company mail\n",
        "    pattern_mail =\"^[a-zA-Z0-9]+@[a-zA-Z0-9.com]\"\n",
        "    Temp = ''\n",
        "    for x in li:\n",
        "      result_1 = re.search(pattern_mail, x) \n",
        "      if(result_1!=None):\n",
        "        Temp = x\n",
        "        break  \n",
        "\n",
        "    #to find Phone number\n",
        "    Temp1 = ''\n",
        "    for x in output2:\n",
        "      if(x.startswith('+') == True):\n",
        "        Temp1 += x\n",
        "        break\n",
        "    Temp3 = Temp1[1:].replace(\" \", \"\")\n",
        "\n",
        "    #to find Address\n",
        "\n",
        "    pattern_street=\"\\d+[ ](?:[A-Za-z0-9.-]+[ ]?)+(?:Avenue|Lane|Road|Boulevard|Drive|Street|Ave|Dr|Rd|Blvd|Ln|St)\\.?\"\n",
        "    Temp2 = ''\n",
        "    for x in output2:\n",
        "      result_3 = re.search(pattern_street, x) \n",
        "      if(result_3!=None):\n",
        "        Temp2 = x\n",
        "        break\n",
        "    if(Temp2 == ''):\n",
        "      Temp2 = output2[-1]\n",
        "  \n",
        "    area = '' \n",
        "    City = ''\n",
        "    State = ''\n",
        "    pincode = ''\n",
        "\n",
        "    address_li = Temp2.split(',')\n",
        "\n",
        "    if(len(address_li)==4):\n",
        "      area += address_li[0]\n",
        "      City += address_li[1]\n",
        "      State += address_li[2]\n",
        "      pincode += address_li[3]\n",
        "\n",
        "    elif(len(address_li)==3):\n",
        "      area += address_li[0]\n",
        "      City += address_li[1]\n",
        "      State += address_li[2]\n",
        "    elif(len(address_li)==2):\n",
        "      area += address_li[0]\n",
        "      City += address_li[1]\n",
        "\n",
        "    else:\n",
        "      area += address_li[0]\n",
        "\n",
        "    #cardholder name:\n",
        "    cardholder_name = output2[0].split(' ')\n",
        "    First_name = cardholder_name[0]\n",
        "    Last_name = cardholder_name[1]\n",
        "    \n",
        "\n",
        "    #designation:\n",
        "    designation = ''\n",
        "    for i in range(2,len(cardholder_name)):\n",
        "      designation += cardholder_name[i]\n",
        "\n",
        "    #companyname:\n",
        "    if(len(list(Temp.split('@')))==2):\n",
        "      company_name = ((Temp.split('@'))[1].split('.'))[0].replace(\"'\",'')\n",
        "      st.write(Temp)\n",
        "    else:\n",
        "      company_name = ''    \n",
        "\n",
        "    tab1, tab2 = st.tabs([\"Personal Details\", \"Official Details\"])\n",
        "    error_count = 0\n",
        "    with tab1:\n",
        "\n",
        "      firstName = st.text_input('First Name',First_name.upper())\n",
        "      lastName = st.text_input('Last Name',Last_name.upper())\n",
        "      phoneNumber = st.text_input('Phone Number', Temp3[0:10])\n",
        "      if(len(phoneNumber)!=10):\n",
        "        error_count += 1\n",
        "        st.error('Phone Number should have 10 digit')\n",
        "      PersonalMail = st.text_input(\"Personal Mail ID\",placeholder = 'Enter your personal mail')\n",
        "    \n",
        "    with tab2:\n",
        "  \n",
        "      \n",
        "      companyName = st.text_input('Company Name',company_name.upper())\n",
        "      if(len(companyName)<=0):\n",
        "        error_count+=1\n",
        "        st.error('Please enter valid company name')\n",
        "      Designation1 = st.text_input('Designation',designation.upper())\n",
        "      if(len(Designation1)<=0):\n",
        "        error_count += 1\n",
        "        st.error('Please enter valid Designation')\n",
        "      CompanyMail = st.text_input('Official Mail ID',First_name.lower()+'.'+Last_name.lower()+'@'+company_name+'.com')\n",
        "      if(len(CompanyMail)<=0):\n",
        "        error_count += 1\n",
        "        st.error('Please enter valid Company Mail')\n",
        "      companyWebsite = st.text_input('Official website','www.'+company_name+'.com')\n",
        "      if(len(companyWebsite)<=0):\n",
        "        error_count += 1\n",
        "        st.error('Please enter valid Company Website')\n",
        "      \n",
        "      col1, col2 = st.columns(2)\n",
        "      with col1:\n",
        "        C_Area = st.text_input('Area',area)\n",
        "        if(len(C_Area)<=0):\n",
        "          error_count += 1\n",
        "          st.error('Please enter area')\n",
        "        C_city = st.text_input('City',City)\n",
        "        if(len(C_city)<=0):\n",
        "          error_count += 1\n",
        "          st.error('Please enter City')\n",
        "\n",
        "      with col2:\n",
        "        C_State = st.text_input('State',State)\n",
        "        if(len(C_State)<=0):\n",
        "          error_count += 1\n",
        "          st.error('Please enter State')\n",
        "        C_Pincode = st.text_input('Pincode',pincode)\n",
        "        if(len(C_Pincode)<=0):\n",
        "          error_count += 1\n",
        "          st.error('Please enter Pincode')\n",
        "\n",
        "      companyAddress = st.text_area('Company Address',C_Area+\", \"+C_city+\", \"+C_State+\", \"+C_Pincode,disabled=True)\n",
        "  \n",
        "  st.write(firstName)\n",
        "  \n",
        "  if(error_count>0):\n",
        "    st.button('Upload to Database',key=\"btn_scrape\",disabled=True)\n",
        "  else:\n",
        "    st.button('Upload to Database',key=\"btn_scrape\",disabled=False)\n",
        "\n",
        "  fun_has_run = False\n",
        "  #Fetching the Data from the SQL and saving it as DataFrame\n",
        "  def creating_Database():\n",
        "    \n",
        "    global fun_has_run\n",
        "    if fun_has_run:\n",
        "        return\n",
        "\n",
        "    fun_has_run = True\n",
        "    #changes made for table1\n",
        "    \n",
        "    if(len(cursor.execute(\"SELECT name FROM sqlite_master WHERE type='table' AND name='Business_card_reader';\").fetchall()) == 0):\n",
        "        sql ='''CREATE TABLE Business_card_reader(\n",
        "                FIRSTNAME CHAR(20),\n",
        "                LASTNAME CHAR(20),\n",
        "                phoneNumber BIGINT,\n",
        "                PersonalMailID VARCHAR(25),\n",
        "                CompanyName VARCHAR(50),\n",
        "                Designation VARCHAR(50),\n",
        "                OfficialMailID VARCHAR(50),\n",
        "                OfficialWebsite VARCHAR(50),\n",
        "                Area VARCHAR(30),\n",
        "                State VARCHAR(30),\n",
        "                City VARCHAR(30),\n",
        "                pincode BIGINT(10)\n",
        "                )'''\n",
        "        cursor.execute(sql)\n",
        "        conn.commit()\n",
        "\n",
        "  creating_Database() \n",
        "\n",
        "  if st.session_state.get(\"btn_scrape\"):\n",
        "    try:\n",
        "      sql = f\"\"\"INSERT INTO Business_card_reader(FIRSTNAME, LASTNAME, phoneNumber, PersonalMailID, CompanyName,Designation,OfficialMailID,OfficialWebsite,Area,State,City,pincode)\n",
        "          VALUES ('{firstName}', '{lastName}', '{phoneNumber}', '{PersonalMail}', '{companyName}','{Designation1}','{CompanyMail}','{companyWebsite}','{C_Area}','{C_city}','{C_State}','{C_Pincode}')\"\"\"\n",
        "      cursor.execute(sql)\n",
        "      st.sucess('Hurray !! Uploaded data into Database sucessfully :)')\n",
        "\n",
        "    except:\n",
        "      st.error('Issue in uploading data into database :(')  \n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "B_rhOBkn25NH",
        "outputId": "4bef38fa-c0fb-47ec-c007-c787ca84fc64"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Overwriting app.py\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sqlite3 import connect\n",
        "conn = connect(\"Business_card.db\")\n",
        "cursor = conn.cursor()\n",
        "sql ='''CREATE TABLE Business_card_reader1(\n",
        "                FIRSTNAME CHAR(20),\n",
        "                LASTNAME CHAR(20),\n",
        "                phoneNumber BIGINT,\n",
        "                PersonalMailID VARCHAR(25),\n",
        "                CompanyName VARCHAR(50),\n",
        "                Designation VARCHAR(50),\n",
        "                OfficialMailID VARCHAR(50),\n",
        "                OfficialWebsite VARCHAR(50),\n",
        "                Area VARCHAR(30),\n",
        "                State VARCHAR(30),\n",
        "                City VARCHAR(30),\n",
        "                pincode BIGINT(10)\n",
        "                )'''\n",
        "cursor.execute(sql)\n",
        "conn.commit()"
      ],
      "metadata": {
        "id": "9b12V-x32cvY"
      },
      "execution_count": 85,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sql = f\"\"\"INSERT INTO Business_card_reader1(FIRSTNAME, LASTNAME, phoneNumber, PersonalMailID, CompanyName,Designation,OfficialMailID,OfficialWebsite,Area,State,City,pincode)\n",
        "          VALUES ({fi}, lastName, phoneNumber, PersonalMail, companyName,Designation1,CompanyMail,companyWebsite,C_Area,C_city,C_State,C_Pincode)\"\"\"\n",
        "    \n",
        "\n",
        "      # Executing the SQL command\n",
        "cursor.execute(sql)"
      ],
      "metadata": {
        "id": "UnEeLWx82wjm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from pyngrok import ngrok\n",
        "\n",
        "ngrok.set_auth_token(\"2Kb3IPrT42j2KcEr6sJhOCenqXb_fY6ycesxdhFEpCCsR6Ym\") #ngrok.com"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "M7wPUcsH50QT",
        "outputId": "bfff04e3-823f-4461-8fa6-960ad277481d"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": []
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!nohup streamlit run app.py --server.port 80 &\n",
        "url = ngrok.connect(port = '80')\n",
        "print(url)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Xu-YdnJX53zq",
        "outputId": "0b5256f9-07b3-4b09-a697-995bf051c8b2"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "nohup: appending output to 'nohup.out'\n",
            "NgrokTunnel: \"http://3395-34-86-208-175.ngrok.io\" -> \"http://localhost:80\"\n"
          ]
        }
      ]
    }
  ]
}
